# -*- coding: utf-8 -*-
"""Cs 370 Reverse Visual Search All-In-One.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14mtHeGPtS3joTzohfolfTC4Dp50u_nl_

the bottom 2 pannels initalize and hold the data set. 


I am personally using the funnled dataset becuse it straitens the faces to make it easier to get the featurs of the faces without worrying about if the face is tilted or not. it w=makes it easier to find faces that match. as calculating the distance bettween featurs will be mutch easier.
"""

from google.colab import drive
drive.mount('/content/drive')

#!tar -xvf  drive/My\ Drive/lfw.tgz
!tar -xvf  drive/My\ Drive/lfw-deepfunneled.tgz
#!pip install tensorflow-io
#!pip install elasticsearch

"""#Reverse Image Search - Baseline (30 points)

the bottom few are my basline codes they do not perform well. but they do try their hardest to feature match.

In the bottom code you can see that we are finding the fatial featerus of all the people in our data set so when we query the dataset latter we caould easilly find it and and we wont have to wait as long to find similar matches every time. i tried to download the list of features of the faces but everytime i tried it would save weirdly and when i tried to access it i wouldnt be able to. so for now i will just have to keep on refinding the features of the faces everytime I restart the nootbook
"""

# Import the libraries
import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.models import Model
from pathlib import Path
from PIL import Image
img_feature = {}

#the below feature extractor works on the whole images are already of only the faces so it will be easier for us to only match the whole image 
#instead of first bound boxing everyimage which will also take very long
#we will use the basic model provided by keras as when i tried to make a model myself it didnt work sadly and was giving me errors for size differences

class FeatureExtractor:
    def __init__(self):
        # Use VGG-16 as the architecture and ImageNet for the weight
        base_model = VGG16(weights='imagenet')
        # Customize the model to return features from fully-connected layer
        self.model = Model(inputs=base_model.input, outputs=base_model.get_layer('fc1').output)
    def extract(self, img):
        # Resize the image
        img = img.resize((224, 224))
        # Convert the image color space
        img = img.convert('RGB')
        # Reformat the image
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
        # Extract Features
        feature = self.model.predict(x)[0]
        return feature / np.linalg.norm(feature)


# Iterate through images (Change the path based on your image location)
fe = FeatureExtractor()
i=0
directory = "code/lfw-deepfunneled"
for folder in os.listdir(directory): 
  i+=1
  print(i)
  f = os.path.join(directory, folder)
  for img_name in os.listdir(f):
    img_path= os.path.join(f, img_name)    
    # Extract Features
    feature = fe.extract(img=Image.open(img_path))
    # Save the Numpy array (.npy) on designated path
    img_feature[img_path] = feature

"""bottom 10 cells are our query cells where we enter an image of our choice and it will try to find find similar faces to the face we have quered. it will first get the features of the quered image which will then try to find the distance between the features. if the features of the face are similar the distinces will be smaller compared to the other faces. as you can see below the image that we queried was in the database so it rutrned the image and 19 others as we will return the top 20 images. 


ps. i dont maybe the pictures arnt good enough but it did not match face featuers properly. as you can see from the bellow results 
"""

print("Albert Costa \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Albert_Costa/Albert_Costa_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Angela Bassett \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Angela_Bassett/Angela_Bassett_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Arminio Fraga \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Arminio_Fraga/Arminio_Fraga_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Billy Crystal \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Billy_Crystal/Billy_Crystal_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Bob Graham \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Bob_Graham/Bob_Graham_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Boris Becker \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Boris_Becker/Boris_Becker_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Bulent Ecevit \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Bulent_Ecevit/Bulent_Ecevit_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Calista Flockhart \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Calista_Flockhart/Calista_Flockhart_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Cameron Diaz \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Cameron_Diaz/Cameron_Diaz_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Carmen Electra \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = Image.open("code/lfw-deepfunneled/Carmen_Electra/Carmen_Electra_0001.jpg")
# Extract its features
query = fe.extract(img)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in img_feature:
  feat_dist[key] = np.linalg.norm(img_feature[key] - query)

# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]
# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

"""#Reverse Image Search Improvement (30 points) 

In the bellow codes i have used face_recognition api which balsts my basline away that cant recognise anything properly. 
"""

#!pip install mtcnn 
#!pip install keras_vggface
#!pip install deepface
!pip3 install cmake face_recognition numpy opencv-python

import face_recognition
import cv2
import numpy as np
import os
import glob

faces_encodings = {}
i=0
directory = "code/lfw-deepfunneled"
n = 0
for folder in os.listdir(directory): 
  i=0
  print(n)
  i+=1
  n+=1
  f = os.path.join(directory, folder)
  for img_name in os.listdir(f):
    img_path= os.path.join(f, img_name)
    recognition = face_recognition.load_image_file(img_path)
    en = face_recognition.face_encodings(recognition)
    faces_encodings[img_path] = en

print("Albert Costa \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Albert_Costa/Albert_Costa_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Angela Bassett \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Angela_Bassett/Angela_Bassett_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Arminio Fraga \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Arminio_Fraga/Arminio_Fraga_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key][0], en[0]))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Albert Costa \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Billy_Crystal/Billy_Crystal_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Bob Graham \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Bob_Graham/Bob_Graham_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Boris Becker \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Boris_Becker/Boris_Becker_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Bulent Ecevit \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Bulent_Ecevit/Bulent_Ecevit_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Calista Flockhart \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Calista_Flockhart/Calista_Flockhart_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Cameron Diaz \n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Cameron_Diaz/Cameron_Diaz_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

print("Carmen Electra\n")
# Import the libraries
import matplotlib.pyplot as plt
import numpy as np
# Insert the image query
img = "code/lfw-deepfunneled/Carmen_Electra/Carmen_Electra_0001.jpg"
# Extract its features
recognition = face_recognition.load_image_file(img)
en = face_recognition.face_encodings(recognition)
# Calculate the similarity (distance) between images
feat_dist = {}
for key in faces_encodings:
  if(len(faces_encodings[key])>0):      
    feat_dist[key] = np.linalg.norm(np.subtract(faces_encodings[key], en))

print(feat_dist)
# Extract 20 images that have lowest distance
sort_feature = sorted(feat_dist.items(), key=lambda x: x[1])
lowest_twenty = sort_feature[:20]

# Visualize the result
axes=[]
fig=plt.figure(figsize=(8,8))
i = 0
for a in lowest_twenty:
  i+=1
  score = a[1]
  axes.append(fig.add_subplot(5, 6, i))
  subplot_title=a[1]
  axes[-1].set_title(subplot_title)  
  plt.axis('off')
  plt.imshow(Image.open(a[0]))
fig.tight_layout()
plt.show()

"""#Documentation (40 points)

##Start

We start this project off by first downloading the LFW Funneled dataset provided. here: http://vis-www.cs.umass.edu/lfw/ we chose LFW because they rotate the image so the face is always facing upright so it is easier to recognise. even the smalest tilt can change the distance between features extracted from the faces. thus having a straight up face is necessary. another thing that is neciserry is if the person is facing the camera or not. if you only see one side of the face the detector will have trouble trying to find a match of the person. as you can see with Arminio Fraga int query image only half of his face is visible thus the mathces where not that great.

##creating baseline

For the baseline we decided to use the basic tensorflow model to do the recognition of features. this is due to it not being the best and not the worst either. but when it comes to faces it can not do much except put features on eyhes and mouth. only rarly does that work as you can see in the baseline exsamples above. 
1. We first went through all the images and got all the featueres and stored them in a list so we can access them later. 
2. we get the query image and get its features just like before
3. we then find the distance between eatch feature and then normalise it with numpy so that its one number so we can easly sort in assending order. 
4. then we get the lowset 20 images and display to the user

As we have said above the basline does not do a really good job of really matching faces to faces but as a basline to reconice faces its great.

Read inline comments for step by step of the code.

##improving baseline with face recognition api

To improve our basline we used Face Recognitioin's Api: https://github.com/ageitgey/face_recognition?ref=hackernoon.com becasue it actually worked in our enviornment and we saw actual results. as we didnt have to use anyother models we could just call Face Recognition whcih would boudn box the faces and plot important facial features at once. As this was an all in one the time to go throuhg all the images and find all features drastically deacreased. even then it would still be idle to have the features ready for all the images before you start querying.
1. implement Face recfnition api instead of tensorflow model 
2. do the same for the query image to find its features
3. now just like before we find the distance between eatch featuer and then normalise it with numpy
4. just like before we show the lowest 20 distanced featured images

This time around you will actually see same faces and similar faces as compared to the baseline. 

Read inline comments for step by step.
"""